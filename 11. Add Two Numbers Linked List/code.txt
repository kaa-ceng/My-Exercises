/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* myList = new ListNode();
        ListNode* myTemp = myList;

        // if any digit exists 
        while(l1 != NULL || l2 != NULL){
            
            // if both digits exist
            if(l1 != NULL && l2 != NULL){
                
                // if sum is bigger than 9, create new node for result with value 1
                if(myTemp->val + l1->val + l2->val > 9){
                    ListNode* myNewNode1 = new ListNode(1);
                    myTemp->next = myNewNode1;
                    myTemp->val = myTemp->val + l1->val + l2->val - 10;
                    myTemp = myTemp->next;
                    l1 = l1->next;
                    l2 = l2->next;
                }

                // if sum is smaller than 10
                else{
                    myTemp->val = myTemp->val + l1->val + l2->val;
                    
                    // if there is any digit left, create new node for result with value 0
                    if (l1->next != NULL || l2->next != NULL){
                        ListNode* myNewNode2 = new ListNode(0);
                        myTemp->next = myNewNode2;
                    
                        myTemp = myTemp->next;
                    }
                    l1 = l1->next;
                    l2 = l2->next;
                }   
            }

            // if only l1 has digit
            else if(l1 != NULL){
                
                // if total is bigger than 9, create new node with value 1
                if(myTemp->val + l1->val > 9){
                    ListNode* myNewNode3 = new ListNode(1);
                    myTemp->next = myNewNode3;
                    myTemp->val = myTemp->val + l1->val - 10;
                    myTemp = myTemp->next;
                    l1 = l1->next;
                }

                // if total is less than 10
                else{
                    myTemp->val = myTemp->val + l1->val ;
                    
                    // if there is digit left, create a new node with value 0;
                    if(l1->next != NULL){
                        ListNode* myNewNode4 = new ListNode(0);
                        myTemp->next = myNewNode4;
                        myTemp = myTemp->next;
                    }

                    l1 = l1->next;
                }
            }

            // if only l1 has digit
            else if(l2 != NULL){
                
                // if total is bigger than 9, create new node with value 1
                if(myTemp->val + l2->val > 9){
                    ListNode* myNewNode5 = new ListNode(1);
                    myTemp->next = myNewNode5;
                    myTemp->val = myTemp->val + l2->val - 10;
                    myTemp = myTemp->next;
                    l2 = l2->next;
                }

                // if total is less than 10
                else{
                    myTemp->val = myTemp->val + l2->val;
                    
                    // if there is digit left, create a new node with value 0;
                    if(l2->next != NULL){
                        ListNode* myNewNode6 = new ListNode(0);
                        myTemp->next = myNewNode6;
                    
                        myTemp = myTemp->next;
                    }

                    l2 = l2->next;
                }
            }
        }
        return myList;
    }
};